type AuthPayload {
  accessToken: String!
  refreshToken: String!
  session: Session!
}

input CreateWorldInput {
  placeholder: String
}

union CreateWorldPayload = MutationErrorPayload | World

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DeleteSessionInput {
  id: String!
}

union DeleteSessionPayload = MutationErrorPayload | MutationSuccess

input DeleteWorldInput {
  worldID: String!
}

union DeleteWorldPayload = MutationErrorPayload | MutationSuccess

input FinishEmailSignupInput {
  email: String!
  name: String!
  password: String!
  rememberMe: Boolean!
  username: String!
}

union FinishEmailSignupPayload = AuthPayload | MutationErrorPayload

input FinishPasswordResetInput {
  email: String!
  password: String!
  resetToken: String!
}

union FinishPasswordResetPayload = MutationErrorPayload | MutationSuccess

input GenerateWorldNamesInput {
  worldID: String!
}

input GetSessionsInput {
  placeholder: String
}

input GetWorldInput {
  worldID: String!
}

input GetWorldsInput {
  placeholder: String
}

input LoginWithPasswordInput {
  email: String!
  password: String!
  rememberMe: Boolean!
}

union LoginWithPasswordPayload = AuthPayload | MutationErrorPayload

type Mutation {
  createWorld(input: CreateWorldInput!): CreateWorldPayload!
  deleteSession(input: DeleteSessionInput!): DeleteSessionPayload!
  deleteWorld(input: DeleteWorldInput!): DeleteWorldPayload!
  finishEmailSignup(input: FinishEmailSignupInput!): FinishEmailSignupPayload!
  finishPasswordReset(input: FinishPasswordResetInput!): FinishPasswordResetPayload!
  loginWithPassword(input: LoginWithPasswordInput!): LoginWithPasswordPayload!
  refreshAccessToken(input: RefreshAccessTokenInput!): RefreshAccessTokenPayload!
  startEmailSignup(input: StartEmailSignupInput!): StartEmailSignupPayload!
  startPasswordReset(input: StartPasswordResetInput!): StartPasswordResetPayloadUnion!
  updateWorld(input: UpdateWorldInput!): UpdateWorldPayload!
  verifyOTP(input: VerifyOTPInput!): VerifyOTPPayload!
}

type MutationError {
  message: String!
  title: String!
}

type MutationErrorPayload {
  error: MutationError!
}

type MutationSuccess {
  success: Boolean!
}

type Query {
  generateWorldNames(input: GenerateWorldNamesInput!): [String!]!
  getCurrentUser: User!
  getSessions(input: GetSessionsInput!): [Session!]!
  getWorld(input: GetWorldInput!): World!
  getWorlds(input: GetWorldsInput!): [World!]!
}

input RefreshAccessTokenInput {
  refreshToken: String!
}

union RefreshAccessTokenPayload = AuthPayload | MutationErrorPayload

type Session {
  createdAt: DateTime!
  expiresAt: DateTime!
  id: ID!
  user: User!
}

input StartEmailSignupInput {
  email: String!
}

union StartEmailSignupPayload = MutationErrorPayload | MutationSuccess

input StartPasswordResetInput {
  email: String!
}

type StartPasswordResetPayload {
  success: Boolean!
}

union StartPasswordResetPayloadUnion = MutationErrorPayload | StartPasswordResetPayload

input UpdateWorldInput {
  archetype: String
  atmosphere: String
  fantasyType: String
  geographyFeatures: [String!]
  geographyType: String
  name: String
  population: String
  technologyLevel: String
  worldID: String!
}

union UpdateWorldPayload = MutationErrorPayload | World

type User {
  createdAt: DateTime!
  email: String!
  id: ID!
  name: String!
  updatedAt: DateTime!
  username: String!
}

type Verification {
  id: ID!
  target: String!
}

enum VerificationType {
  CHANGE_EMAIL
  ONBOARDING
  RESET_PASSWORD
  TWO_FACTOR_AUTH
}

input VerifyOTPInput {
  code: String!
  target: String!
  type: VerificationType!
}

union VerifyOTPPayload = MutationErrorPayload | Verification

type World {
  archetype: String
  atmosphere: String!
  createdAt: DateTime!
  fantasyType: String!
  geographyFeatures: [String!]!
  geographyType: String!
  id: ID!
  name: String!
  population: String!
  technologyLevel: String!
  updatedAt: DateTime!
}