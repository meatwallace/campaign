---
description: React Component Structure Standards
globs: "**/*.tsx"
---

# React Component Structure Standards

Standards for structuring React components and their files.

<rule>
name: implementation_standards_react 
description: Standards for React component structure and organization
filters:
  - type: file_extension
    pattern: "\\.tsx$"

actions:
  - type: suggest
    message: |
      React Component Standards:

      1. Component Structure:
         - Use functional components with explicit return types
         - Structure files in this order:
           a. Types/interfaces
           b. Constants/configuration
           c. Exported component
           d. Subcomponents
           e. Helpers/utils
           f. Static content
         - Export component states/enums as static properties
         - Keep components focused and single-purpose

      2. Props:
         - Use type for props, not interface
         - Prefix boolean props with auxiliary verbs (is/has/should)
         - Use handler prefix for callbacks (on/handle)
         - Document complex props with TSDoc comments
         - Make props optional when there's a sensible default
         - Use discriminated unions for variant props
         - Access props via property access, not destructuring

      3. Component Organization:
         - One main component per file
         - Extract reusable logic to hooks
         - Extract complex subcomponents to separate files
         - Co-locate component with its styles and tests
         - Use consistent file naming:
           a. Component: `component-name.tsx`
           b. Tests: `component-name.test.tsx`
           c. Styles: `component-name.css.ts`

      4. Component Patterns:
         - Use composition over inheritance
         - Implement proper error boundaries
         - Handle loading and error states
         - Use proper HTML semantics
         - Follow accessibility best practices
         - Support keyboard interactions
         - Use ARIA attributes appropriately

examples:
  - input: |
      ```tsx
      // Bad - default export, function expression, destructured props, no prop type
      export default const Button = ({ p }: any) => {
        return <button>{p}</button>
      }

      // Good - proper component structure
      import { type ReactNode } from 'react'
      import { Spinner } from '~/components/spinner.tsx'
      import * as styles from './status-button.css'

      enum Status {
        Idle = 'idle',
        Pending = 'pending',
        Success = 'success',
        Error = 'error',
      };

      type Props = {
        status: Status,
        disabled?: boolean,
        onClick: () => void,
        children: ReactNode,
      };

      export function StatusButton(props): Props {
        return (
          <button
            className={styles.button}
            disabled={props.disabled || status === Status.Pending}
            onClick={props.onClick}
            type="submit"
          >
            {props.status === Status.Pending ? (
              <Spinner role="status" aria-label="Loading" />
            ) : status === Status.Success ? (
              <Icon role="img" aria-label="Success" name="check" />
            ) : status === Status.Error ? (
              <Icon role="img" aria-label="Error" name="x" />
            ) : null}
            
            {props.children}
          </button>
        )
      };

      // Good - exposing enum via static properties
      StatusButton.Status = Status;
      ```
    output: "React component and tests following standards"

metadata:
  priority: high
  version: 1.0
</rule>