---
description: TypeScript and General Coding Standards
globs: "**/*.{ts,tsx}"
alwaysApply: false
---

# TypeScript and Coding Standards

Standards for TypeScript usage and general coding practices.

<rule>
name: implementation_standards_typescript
description: TypeScript coding standards and best practices
filters:
  - type: file_extension
    pattern: "\\.(ts|tsx)$"

actions:
  - type: suggest
    message: |
      TypeScript Standards:

      1. Types and Interfaces:
         - Prefer interfaces over tyeps
         - Use descriptive names with auxiliary verbs (e.g., `isLoading`, `hasError`)
         - Avoid constant maps; use enums instead
         - Use type inference where obvious
         - Export types that are part of the public API

      2. Syntax and Style:
         - Use "function" keyword for pure functions
         - Use curly braces and line breaks for readability
         - Avoid single line concise syntax
         - Use lowercase comments
         - Group imports alphabetically:
           a. Default imports from packages
           b. Named imports from packages
           c. Named imports from parent
           d. Named imports from sibling
         - Imports include file extensions (i.e. '.ts')

      3. File Organization:
         - Use lowercase with dashes for files & directories
         - Favor named exports
         - Group related functionality
         - Keep files focused and single-purpose
         - Index files:
           a. Use explicit named exports (export { x, y })
           b. Avoid re-exporting everything (export * from)
           c. Document public API exports
           d. Keep index files flat (no business logic)

      4. Type Safety:
         - Enable strict mode
         - Avoid type assertions
         - Use unknown over any
         - Properly type async operations
         - Leverage union types for variants
         - Use `tiny-invariant` package to narrow nullish values

examples:
  - input: |
      ```ts
      // Bad - using type for object structure
      type UserData = {
        firstName: string;
        lastName: string;
        status: string;
      }

      // Bad - constant style enum
      const STATUS = {
        ACTIVE: 'active',
        INACTIVE: 'inactive'
      } as const;

      // Good - using interface, enum, and proper organization
      type UserStatus = 'active' | 'inactive';

      interface UserData {
        firstName: string;
        lastName: string;
        status: UserStatus;
      };

      enum Status {
        Active = 'active',
        Inactive = 'inactive'
      }

      // Bad - type assertion and any
      const parseUser = (data: any) => {
        return data as UserData;
      };

      // Good - proper typing and validation
      interface UserResponse {
        data: unknown;
        status: number;
      };

      function parseUser(response: UserResponse): UserData {
        if (!isUserData(response.data)) {
          throw new Error('Invalid user data');
        }

        return response.data;
      }

      // Bad - index.ts with wildcard exports, no file extensions
      export * from './user/create-user';
      export * from './user/update-user';

      // Good - index.ts with explicit exports, file extensions
      export { createUser } from './user/create-user.ts';
      export { updateUser } from './user/update-user.ts';

      // Bad - manual null checks and type assertions
      async function createSession(args: CreateSessionArgs, ctx: Context) {
        const ipAddress = ctx.request.headers.get('x-forwarded-for');

        if (!ipAddress) {
          throw new Error('IP address must be provided in request headers');
        }

        ...
      }

      // Good - using tiny-invariant for inline type narrowing 
      import invariant from 'tiny-invariant';

      async function createSession(args: CreateSessionArgs, ctx: Context) {
        const ipAddress = ctx.request.headers.get('x-forwarded-for');

        invariant(ipAddress, 'IP address must be provided in request headers');
        ...
      }
      ```
    output: "TypeScript code following standards"

metadata:
  priority: high
  version: 1.0
</rule>
