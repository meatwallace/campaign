---
description: Standards for testing route components and handlers in our React application
globs: "**/app-web/routes/**/*.test.{ts,tsx}"
alwaysApply: false
---

# Route Testing Standards

Standards for testing React Router route components, loaders, and actions in our React application.

<rule>
name: testing_standards_routes
description: Standards for testing React Router route components and handlers
filters:
  - type: file_extension
    pattern: "\\.test\\.(ts|tsx)$"
  - type: path
    pattern: "routes/"

actions:
  - type: suggest
    message: |
      Route Testing Standards:

      1. File Organization:
         - Co-locate test files with route files
         - Use `.test.tsx` extension
         - Follow the same directory structure as routes
         - Keep test files focused on route behavior

      2. Test Setup:
         - Create type-safe setup functions
         - Use `createRoutesStub` for router configuration
         - Return commonly used utilities
         - Clean up test data and state

      3. Required Test Cases:
         - Basic rendering and accessibility
         - Form validation and error states
         - Navigation and routing behavior
         - Data interactions and loading states
         - Authentication and authorization

      4. Testing Patterns:
         - Use Testing Library best practices
         - Follow user interaction patterns
         - Test both success and error paths
         - For routes with loaders, use `find*` queries (e.g. `findByRole`) for the first element assertion
         - Never use `get*` queries before loader data is available


examples:
  - input: |
      ```tsx
      import { afterEach, expect, test, vi } from 'vitest';
      import { render, screen } from '@testing-library/react';
      import userEvent from '@testing-library/user-event';
      import { createRoutesStub } from 'react-router';
      import { drop } from '@mswjs/data';
      import { db } from '~/mocks/db.ts';
      import { withRouteProps } from '~/test-utils/with-route-props.tsx';
      import { Routes } from '~/types.ts';
      import { Login, action, loader } from './login.tsx';

      interface TestConfig {
        initialPath?: string;
      };

      function setupTest(config: TestConfig = {}) {
        const user = userEvent.setup();

        const LoginStub = createRoutesStub([
          {
            path: '/',
            // Good - attach React Router props using our HOC
            Component: withRouteProps(Login),
            action,
            loader,
          },
          {
            path: Routes.Dashboard,
            Component: () => 'DASHBOARD_ROUTE',
          },
        ]);

        render(<LoginStub />);

        return { user };
      }

      // Good - MSW DB cleanup after each test
      afterEach(() => {
        drop(db);
      });

      // Bad - using `getByRole` when route has a loader
      test('it renders the login form with accessible elements', () => {
        setupTest();

        const emailInput = screen.getByRole('textbox', { name: /email/i });

        expect(emailInput).toBeInTheDocument();
      });

      // Good - using `findByRole` when route has a loader
      test('it renders the login form with accessible elements', async () => {
        setupTest();

        const emailInput = await screen.findByRole('textbox', { name: /email/i });
        const passwordInput = screen.getByLabelText(/password/i);
        const submitButton = screen.getByRole('button', { name: /sign in/i });

        expect(emailInput).toBeInTheDocument();
        expect(passwordInput).toBeInTheDocument();
        expect(submitButton).toBeInTheDocument();
      });

      // Good - testing form validation
      test('it shows validation errors for invalid inputs', async () => {
        const { user } = setupTest();

        const emailInput = await screen.findByRole('textbox', { name: /email/i });
        const submitButton = screen.getByRole('button', { name: /sign in/i });

        await user.type(emailInput, 'invalid-email');
        await user.click(submitButton);

        const errorText = await screen.findByText(/email is invalid/i);

        expect(errorText).toBeInTheDocument();
      });

      // Good - testing fundamental behaviour including route redirect
      test('it redirects to dashboard on successful login', async () => {
        const { user } = setupTest();

        db.user.create({
          email: 'test@example.com',
          password: 'password123',
        });

        const emailInput = await screen.findByRole('textbox', { name: /email/i });
        const passwordInput = screen.getByLabelText(/password/i);
        const submitButton = screen.getByRole('button', { name: /sign in/i });

        await user.type(emailInput, 'test@example.com');
        await user.type(passwordInput, 'password123');
        await user.click(submitButton);

        const dashboardRoute = await screen.findByText('DASHBOARD_ROUTE');

        expect(dashboardRoute).toBeInTheDocument();
      });
      ```
    output: "Route tests following standards"

metadata:
  priority: high
  version: 1.0