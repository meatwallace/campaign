---
description: Domain Service Handler Implementation Standards
globs: "**/service-*/src/handlers/**/*.ts"
---

# Domain Service Handler Standards

Standards for implementing domain service handlers across our microservices.

<rule>
name: implementation_standards_domain_service_handlers
description: Standards for implementing domain service handlers
filters:
  - type: file_path
    pattern: ".*/service-.*/src/handlers/.*\\.ts$"
  - type: file_path
    pattern: "!.*\\.test\\.ts$"

actions:
  - type: suggest
    message: |
      Domain Service Handler Standards:

      1. File Organization:
         - Place handlers in `src/handlers/` directory
         - Use kebab-case for filenames matching the operation (e.g. `create-user.ts`)
         - Co-locate test files with handlers (e.g. `create-user.test.ts`)
         - Export handlers from `index.ts`
         - Group related handlers by domain concept

      2. Handler Structure:
         - Export async functions with consistent naming
         - Accept `Context` and `PostgresJsDatabase` parameters
         - Use type-safe request/response types from `@vers/service-types`
         - Follow consistent error handling patterns
         - Return JSON responses via `ctx.json()`
         - Use proper HTTP status codes
         - Document complex logic with comments

      3. Type Safety:
         - Import types from shared packages
         - Use database types from schema
         - Define explicit request/response types
         - Properly type error handling
         - Use type inference where possible
         - Never use `any` or `unknown` without constraints

      4. Database Operations:
         - Use `drizzle-orm` for database operations
         - Handle unique constraint violations
         - Use transactions for multi-step operations
         - Follow schema conventions
         - Set audit fields (`createdAt`, `updatedAt`)
         - Generate IDs using `createId()` from `@paralleldrive/cuid2`

      5. Error Handling:
         - Catch and handle known errors explicitly
         - Return standardized error responses
         - Use consistent error message format
         - Include proper error details
         - Log errors appropriately
         - Throw unknown errors

      6. Response Format:
         - Use consistent success/error shape
         - Include `success` boolean flag
         - Return data on success
         - Return error message on failure
         - Omit sensitive data from responses
         - Format dates consistently

examples:
  - input: |
      ```ts
      // Bad - inconsistent parameters, missing types
      export async function createThing(ctx) {
        const data = await ctx.req.json();
        return ctx.json({ ok: true });
      }

      // Bad - poor error handling
      export async function badHandler(ctx: Context, db: Database) {
        try {
          // ...
        } catch (e) {
          return ctx.json({ error: e.message });
        }
      }

      // Good - proper handler implementation
      import { Context } from 'hono';
      import * as schema from '@vers/postgres-schema';
      import { CreateUserRequest, CreateUserResponse } from '@vers/service-types';
      import { PostgresJsDatabase } from 'drizzle-orm/postgres-js';
      import { createId } from '@paralleldrive/cuid2';
      import { isUniqueConstraintError } from '@vers/service-utils';

      export async function createUser(
        ctx: Context,
        db: PostgresJsDatabase<typeof schema>,
      ) {
        try {
          const { email, name, username } = await ctx.req.json<CreateUserRequest>();

          const createdAt = new Date();

          // Good - enforcing the DB data type
          const user: typeof schema.users.$inferSelect = {
            id: createId(),
            email,
            name,
            username,
            createdAt,
            updatedAt: createdAt,
          };

          await db.insert(schema.users).values(user);

          // Good - enforcing the response data type
          const response: CreateUserResponse = {
            success: true,
            data: {
              id: user.id,
              email: user.email,
              name: user.name,
              username: user.username,
              createdAt: user.createdAt,
              updatedAt: user.updatedAt,
            },
          };

          return ctx.json(response);
        } catch (error: unknown) {
          // Good - Postgres error handling
          if (error instanceof pg.PostgresError) {
            if (isUniqueConstraintError(error, 'users_email_unique')) {
              return ctx.json({
                success: false,
                error: 'A user with that email already exists',
              });
            }
          }

          // Good - generic error handling 
          if (error instanceof Error) {
            return ctx.json({
              success: false,
              error: 'An unknown error occurred',
            });
          }

          throw error;
        }
      }
      ```
    output: "Handler following implementation standards"

metadata:
  priority: high
  version: 1.0
</rule> 