---
description: Standards for creating and maintaining MSW (Mock Service Worker) mocks for client-side GraphQL operations.
globs: "**/mocks/handlers/gql/**/*.ts"
---

# GraphQL MSW Mock Standards

Standards for creating and maintaining MSW (Mock Service Worker) mocks for client-side GraphQL operations.

<rule>
name: testing_standards_msw_graphql
description: Standards for creating client-side GraphQL MSW mocks for testing
filters:
  - type: path
    pattern: "mocks/handlers/gql/"

actions:
  - type: suggest
    message: |
      GraphQL MSW Mock Creation Standards:

      1. File Organization:
         - Place handlers in `mocks/handlers/gql/` directory
         - Use kebab-case for filenames matching the operation (e.g. `create-user.ts`)
         - Name files after the GraphQL operation they mock
         - Export handlers with PascalCase names matching the operation

      2. Type Safety:
         - Define explicit Response and Variables types using generated GraphQL types
         - Extend MutationResponse/QueryResponse for all handlers
         - Use strict typing for input variables
         - Document complex type structures
         - Never use `any` or `unknown` types

      3. Handler Structure:
         - Use `HttpResponse.json()` for consistent response formatting
         - Match GraphQL response shapes exactly
         - Include proper data nesting (data > operation > result)
         - Handle all error cases explicitly
         - Follow GraphQL conventions for success/error responses
         - Include proper `null` handling

      4. Database Integration:
         - Use MSW database for state management
         - Clean up database in `afterEach` blocks
         - Use proper database querying patterns
         - Handle database errors gracefully
         - Maintain referential integrity between models
         - Mirror production database constraints

      5. Error Handling:
         - Return proper GraphQL error structures
         - Include error titles and messages
         - Handle validation errors
         - Handle not found errors
         - Handle authorization errors
         - Use consistent error patterns

      6. Testing Integration:
         - Export handlers individually for selective test usage
         - Allow handler overrides in tests
         - Reset handlers between tests
         - Document handler behavior
         - Provide test utilities for common operations
         - Support partial mocking

examples:
  - input: |
      ```ts
      // Bad - missing types, inconsistent response structure
      export const badHandler = graphql.mutation('CreateUser', ({ variables }) => {
        return {
          data: { success: true }
        }
      });

      // Bad - direct mutation response without HttpResponse
      export const anotherBadHandler = graphql.mutation('CreateUser', ({ variables }) => {
        return {
          data: {
            createUser: {
              success: true
            }
          }
        }
      });

      // Good - proper typing and response structure
      import { graphql, HttpResponse } from 'msw';
      import { CreateUser } from '~/gql/graphql';
      import { MutationResponse } from './types';
      import { db } from '~/mocks/db';

      type CreateUserResponse = MutationResponse<{
        createUser: CreateUser;
      }>;

      type CreateUserVariables = {
        input: {
          email: string;
          password: string;
        };
      };

      export const CreateUser = graphql.mutation<
        CreateUserResponse,
        CreateUserVariables
      >('CreateUser', async ({ variables }) => {
        try {
          const existingUser = db.user.findFirst({
            where: {
              email: { equals: variables.input.email },
            },
          });

          if (existingUser) {
            return HttpResponse.json({
              data: {
                createUser: {
                  error: {
                    title: 'Validation Error',
                    message: 'A user with that email already exists',
                  },
                },
              },
            });
          }

          const user = db.user.create({
            email: variables.input.email,
            passwordHash: variables.input.password,
          });

          return HttpResponse.json({
            data: {
              createUser: {
                success: true,
                user: user,
              },
            },
          });
        } catch {
          return HttpResponse.json({
            data: {
              createUser: {
                error: {
                  title: 'Internal Error',
                  message: 'Something went wrong',
                },
              },
            },
          });
        }
      });

      // Good - proper test integration
      import { server } from '~/mocks/node';
      import { db } from '~/mocks/db';

      // Good - reset MSW database and handlers after each test
      afterEach(() => {
        server.resetHandlers();

        drop(db);
      });

      test('handles server error', async () => {
        // Override handler for this test
        server.use(
          graphql.mutation('CreateUser', () => {
            return HttpResponse.json({
              data: {
                createUser: {
                  error: {
                    title: 'Server Error',
                    message: 'Something went wrong',
                  },
                },
              },
            });
          }),
        );

        // Test implementation
      });
      ```
    output: "GraphQL MSW mock following standards"

metadata:
  priority: high
  version: 1.0
</rule>